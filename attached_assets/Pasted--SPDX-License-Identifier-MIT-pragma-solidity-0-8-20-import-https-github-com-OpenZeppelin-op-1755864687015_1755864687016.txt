// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol";

/// @title RoleBasedSBT - ERC20-like Soulbound Token for Roles
contract RoleBasedSBT is Ownable {
    string public name;
    string public symbol;
    uint8 public decimals = 18;
    uint256 public totalSupply;
    string public role; // role associated with this token

    mapping(address => uint256) public balanceOf;

    event Mint(address indexed to, uint256 amount);
    event Burn(address indexed from, uint256 amount);

    error Soulbound();

    constructor(
        string memory _name,
        string memory _symbol,
        string memory _role,
        address _owner
    ) Ownable(_owner){
        name = _name;
        symbol = _symbol;
        role = _role;
        _transferOwnership(_owner);
    }

    /// @notice Mint soulbound tokens to a user (only owner can do this)
    function mint(address to, uint256 amount) external onlyOwner {
        balanceOf[to] += amount;
        totalSupply += amount;
        emit Mint(to, amount);
    }

    /// @notice Burn user's tokens (only owner can do this)
    function burn(address from, uint256 amount) external onlyOwner {
        require(balanceOf[from] >= amount, "Not enough balance");
        balanceOf[from] -= amount;
        totalSupply -= amount;
        emit Burn(from, amount);
    }

    // Disable all transfer mechanics (soulbound)
    function transfer(address, uint256) external pure returns (bool) {
        revert Soulbound();
    }

    function transferFrom(address, address, uint256) external pure returns (bool) {
        revert Soulbound();
    }

    function approve(address, uint256) external pure returns (bool) {
        revert Soulbound();
    }

    function allowance(address, address) external pure returns (uint256) {
        return 0;
    }
}

/// @title RoleBasedSBTFactory - Deploys and manages multiple RoleBasedSBTs
contract RoleBasedSBTFactory is Ownable {
    RoleBasedSBT[] public allRoleTokens;

    event RoleTokenCreated(address indexed token, string role);

    constructor() Ownable(msg.sender) {}

    /// @notice Deploy a new RoleBasedSBT for a specific role
    function createRoleToken(
        string memory name,
        string memory symbol,
        string memory role
    ) external onlyOwner returns (address) {
        RoleBasedSBT token = new RoleBasedSBT(name, symbol, role, msg.sender);
        allRoleTokens.push(token);
        emit RoleTokenCreated(address(token), role);
        return address(token);
    }

    /// @notice Get all deployed role tokens
    function getAllTokens() external view returns (RoleBasedSBT[] memory) {
        return allRoleTokens;
    }
}